<?php


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////변수
$a = 1; //정수(int)
$b = 2;
$c = $a + $b;   // 정수의 계산
$d = 3.14;  //실수(float)
$e = "hi";  //문자열(string)
$f = 'hello';   //문자열(string)
$g = array(1,2,3,4);    //배열 array
$h = array('a'=>1,'b'=>2);  //연관배열 associative array


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////배열
$aa = array('a'=>1,'b'=>2);
var_dump($aa);echo "<br />";
// 연관배열은 여러개의 값을 키:값 쌍으로 담는 구조
// var_dump = 데이터 정보를 보여주는 내장함수

$bb = array(1,2,3,4);
array_push($bb, 5);
// 배열에 항목 추가할 때 array_push

unset($bb[4]);
// 배열에 항목 삭제. 남은 배열의 다른 항목들은 인덱스가 재배치 되지 않고 그대로 유지

$cc = [1,2,3];
$cc['age'] = 999;
// 일반배열과 연관배열이 혼합된 형태로도 사용 가능
// array(4) { [0]=> int(1) [1]=> int(2) [2]=> int(3) ["age"]=> int(999) } 이렇게

$bb['b'] = 20;
// 연관배열에 값 추가할 때는 $변수명[키] = 값 형태

unset($bb[1]);
// 연관배열도 삭제할 때는 unset 똑같이 사용



////////////////////////////////////////////////////////////////////////////////////////////////////////// 산술 연산자와 문자열 연산자

$aaa = 10;
$bbb = 20;

$ccc = $aaa + $bbb; // int(30)
$ddd = $aaa - $bbb; // int(-10)
$eee = $aaa * $bbb; // int(200)
$fff = $aaa / $bbb; // float(0.5)
$ggg = $aaa % $bbb; // int(10)

$hhh = 'hi'; //string(2) 'hi'
$iii = "hello"; //string(7) "hello"
$jjj = "$hhh 안녕 $iii";  // ""로 감싼 문자열은 안에 다른 변수를 넣을 수 있고 "안의 변수는 값으로 치환되어서 문자열과 결합된다.
$kkk = $hhh.$iii;   // .은 문자열 두개 이어붙이는 연산자



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////비교 연산자

$a4 = 10;
$b4 = "10";

$c4 = $a4 == $b4;   //bool(true) ==는 타입 신경x 값이 같은지만 비교
$d4 = $a4 === $b4;  //bool(false) ===는 값과 타입이 같은지 비교
$e4 = $a4 != $b4;   //bool(false) !=는 값이 다른지 비교. 타잆은 신경x
$f4 = $a4 <> $b4;   //bool(false) <> 와 != 는 같은 의미
$g4 = $a4 !== $b4;  //bool(true) !== 는 값과 타입이 다른지 비교. 값이나 타입 하나라도 다르면 참


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////비교 연산자

$a5 = true;
$b5 = false;

$c5 = $a5 && $b5;   //bool(false) &&는 and 연산자로 둘다 참이어야 참
$d5 = $a5 || $b5;   //bool(true) ||는 or 연산자로 둘중 하나라도 참이면 참
$e5 = !$a5; //bool(false) !는 not으로 참이면 거짓을, 거짓이면 참을 반환



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////반복문


$a6 = array(1,2,3,4,5);
foreach ($a6 as $item){
    echo $item;
}
//실행결과는
//1
//2
//3
//4
//5
$b6 = array('a' => 10, 'b' => 20, 'c' =>'hi php');
foreach ($b6 as $key => $value){
    echo "$key => $value";
}
//실행결과는
//a => 10
//b => 20
//c => hi php


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////함수


// 기본적인 함수 형태
function hello_php()
{
    echo "hello php";
}


// 함수명(파라미터값) 형태로 호출할 때
function nicetomeet($var)
{
    echo "nice to meet $var";
}
nicetomeet("you");


// 파라미터 여러개를 전달받아서 결과를 반환할 때
function add($a,$b)
{
    return $result;
}
$result = add(1,2);

// 함수가 기본 파라미터를 가지는데 파라미터가 전달되지 않으면 기본 파라미터를 사용하고 파라미터를 전달하면 전달된 파라미터를 사용
function defaultfunc($name = 'yse')
{
    echo "my name is $name";
}
defaultfunc();
defaultfunc('30min php');



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////GET 파라미터

// HTTP 메소드는 크게 9가지가 있는데 이중 브라우저에서는 GET과 POST 두가지를 주로 사용한다.
//GET은 데이터를 읽어올 때 사용하고 POST는 데이터를 저장, 수정, 삭제할 때 사용한다.
//GET요청은 주소창에 파라미터를 담아서 서버에 요청을 보낸다.
//POST요청은 파라미터가 http 본문(body)에 실려서 서버로 전송되기 때문에 주소창에는 변화가 없다.


//GET 파라미터는 ?로 시작해서 각 항목은 키:값 형태로 구성하며 항목간 연결은 &로 표시한다. 이를 쿼리스트링이라 부른다.
$getName = $_GET['name'];
$getAge = $_GET['age'];

echo "name is $getName, age is $getAge";

//name is [값1], age is [값2]

//파라미터 name = 값1은 $_GET['값1']으로, age = 값2 파라미터는 $_GET['값2']로 주소창의 파라미터를 읽어들임


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////POST 파라미터


if($_SERVER['REQUEST_METHOD'] == 'POST') {
    //  HTTP 메소드가 POST일 때 실행되는 부분
    $postName = $_POST['name'];
    $postAge = $_POST['age'];
    echo "name is $postName, age is $postAge";
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////리다이렉트


header("Location: /target_url");
exit();

//http://localhost/redirect.php에 접속하면 http://localhost/target_url로 이동하게 됨

//http 규약상 다른 페이지로의 이동은 http 응답 헤더(response header)에 301혹은 302 코드와 이동할 페이지로의 이동 주소를
//함께 보냄으로써 이루어진다. php는 header 함수를 통해 응답 헤더에 보낼 데이터를 설정한다.

//exit() 는 php 실행을 끝내는 표시로 이후에 어떤 코드가 있어도 실행하지 않고 응답을 브라우저에 되돌린다.
//굳이 쓰는 이유는 이후에 나오는 코드가 리다이렉트가 아닌 다른 상태로 바꿀 가능성을 차단하기 위함이다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////세션

session_start();
//php에서 세션을 사용하려면 session_start()를 반드시 사용하기 전에 써서 세션을 준비해야 한다.
//PHP의 기본 세션은 단순한 파일로 저장되기 때문에 파일을 읽어오는 것이다.

$action = $_GET['action'];

if($action == "set"){
    $_SESSION['key'] = 'session_value';
} elseif($action == "get"){
    if(isset($_SESSION['key'])){
        echo $_SESSION['key'];
    }else{
        echo "No SESSION";
    }
}elseif ($action == "remove"){
    if (isset($_SESSION['key'])){
//        unset($_SESSION['key']);
        session_destroy();
    }
//    세션 삭제 후 "?action=get 주소로 이동"
    redirect("?action=get");
}

// isset은 변수가 존재하는지 확인하는 내장 함수.
// 세션이 이미 시작했는지 확인하기 위해 isset($_SESSION)으로 확인


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////html 이스케이프

//htmlspecialchars() 함수는 thml에서 XSS공격을 방어하기 위해 특수 문자를 인코딩한다.
//htmllentities도 있지만 바꿀 수 있는 건 모두 바꾸기 때문에 인코딩에 영향을 받는다. 그래서 htmlspecialchars()를 사용하는 편이 좋다.
//
//인코딩한 결과를 반대로 바꾸려면 디코딩 함수인 htmlspecialchars_decode를 사용한다.



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////html 이스케이프










?>
